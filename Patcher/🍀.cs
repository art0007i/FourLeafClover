using BepInEx.Preloader.Core.Patching;
using Mono.Cecil;
using Mono.Cecil.Cil;
using MonoMod.Utils;

namespace FourLeafClover;

[PatcherPluginInfo(GUID, Name, Version)]
public class Patcher : BasePatcher
{
    public const string GUID = "art0007i.FourLeafClover";
    public const string Name = "üçÄ";
    public const string Version = "3.0.1";

    [TargetAssembly("Elements.Core.dll")]
    public bool PatchFrooxEngine(ref AssemblyDefinition assembly, string filename)
    {
        // Add stub to Elements.Core.CollectionsExtensions, which will be patched by our Plugin at runtime
        var collectionExtensions = assembly.MainModule.GetType("Elements.Core.CollectionsExtensions");

        // Code generated by https://cecilifier.me/
        //Method : FourLeafClover_ProcessNumber
        var md_FourLeafClover_ProcessNumber_1 = new MethodDefinition("üçÄ_ProcessNumber", MethodAttributes.Public | MethodAttributes.Static | MethodAttributes.HideBySig, assembly.MainModule.TypeSystem.Single);
        collectionExtensions.Methods.Add(md_FourLeafClover_ProcessNumber_1);
        md_FourLeafClover_ProcessNumber_1.Body.InitLocals = true;
        var il_FourLeafClover_ProcessNumber_2 = md_FourLeafClover_ProcessNumber_1.Body.GetILProcessor();

        //Parameters of 'public static float FourLeafClover_ProcessNumber(float num) {return num;}'
        var p_Num_3 = new ParameterDefinition("num", ParameterAttributes.None, assembly.MainModule.TypeSystem.Single);
        md_FourLeafClover_ProcessNumber_1.Parameters.Add(p_Num_3);

        //return num;
        il_FourLeafClover_ProcessNumber_2.Emit(OpCodes.Ldarg_0);
        il_FourLeafClover_ProcessNumber_2.Emit(OpCodes.Ret);
        
        // Patch Elements.Core.CollectionsExtensions.GetRandomWithWeight to call our stub method
        var randomWithWeight = collectionExtensions.FindMethod("GetRandomWithWeight");

        var codes = randomWithWeight.Body.Instructions;

        var lookForAdd = false;
        for (int i = 0; i < codes.Count; i++)
        {
            var code = codes[i];
            if (code.OpCode == OpCodes.Ldarg_1)
            {
                lookForAdd = true;
            }
            if (lookForAdd && code.OpCode == OpCodes.Add)
            {
                lookForAdd = false;
                var cc = Instruction.Create(OpCodes.Call, md_FourLeafClover_ProcessNumber_1);
                codes.Insert(i, cc);
            }
        }

        return true;
    }
}